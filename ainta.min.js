/**
 * https://www.npmjs.com/package/@0bdx/ainta
 * @version 0.0.1
 * @license Copyright (c) 2023 0bdx <0@0bdx.com> (0bdx.com)
 * SPDX-License-Identifier: MIT
 */
const t="array",n="bigint",e="boolean",o="function",i="null",r="number",y="object",s="string",p="symbol",$="undefined",u={}
function c(n,e,o=u){const r=typeof n
if(r===o.type)return!1
const y=e?`\`${e}\``:"A value",p=o.begin?`${o.begin}: ${y}`:y,$=p+" cannot be validated, `options.type` ",c="is an "+t,f="is "+i,b="is type ",d=" not ",g=d+"type ",A=`'${s}'`
return void 0===o.type?`${$}is${d}set`:null===o.type?$+f+g+A:Array.isArray(o.type)?$+c+g+A:typeof o.type!==s?$+b+`'${typeof o.type}'`+d+A:a(o.type)?`${p} ${null===n?f+g:Array.isArray(n)?c+g:`${b}'${r}'${d}`}'${o.type}'`:`${$}'${l(o.type)}'${d}known`
}const a=t=>-1!==[n,e,o,r,y,s,p,$].indexOf(t),l=t=>encodeURI(t.length<=32?t:`${t.slice(0,21)}...${t.slice(-8)}`)
function f(t,n,o=u){return c(t,n,{...o,type:e})}function b(t=u,...n){const e=[]
return[e,...n.map((n=>d(t,n,e)))]}const d=(t,n,e)=>(o,i,r)=>{const y=n(o,i,{...t,...r})
return y&&e.push(y),y}
export{f as aintaBoolean,c as aintaType,b as default}
